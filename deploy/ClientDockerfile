# Arguments
ARG NODE_ENV
ARG HOST
ARG PORT
ARG ATLAS_APP
ARG API_URL
ARG AUTH_COOKIE_NAME
ARG API_SWAGGER_URL
ARG GOOGLE_MAPS_API_KEY
ARG BOX_CLIENT_ID
ARG DROPBOX_APP_KEY
ARG GOOGLE_DRIVE_CLIENT_ID
ARG GOOGLE_DRIVE_DEVELOPER_KEY
ARG ONEDRIVE_CLIENT_ID

FROM ubuntu:14.04
MAINTAINER Mark Thomsit <mark@makeandship.com>

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

ENV NODE_VERSION 8.11.2
ENV NVM_DIR /usr/local/nvm

RUN echo "deb mirror://mirrors.ubuntu.com/mirrors.txt trusty main restricted universe multiverse" > /etc/apt/sources.list; \
	echo "deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-updates main restricted universe multiverse" >> /etc/apt/sources.list; \
	echo "deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-backports main restricted universe multiverse" >> /etc/apt/sources.list; \
	echo "deb mirror://mirrors.ubuntu.com/mirrors.txt trusty-security main restricted universe multiverse" >> /etc/apt/sources.list

# install required software before using nvm/node/npm/bower
RUN apt-get update
RUN apt-get install -y curl
RUN apt-get install -y git
RUN apt-get install -y python
RUN apt-get install -y build-essential
RUN apt-get install -y imagemagick
RUN apt-get install -y libssl-dev

# add package manager for yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" >> /etc/apt/sources.list

# download and install nvm
RUN curl https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash \
	&& source $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default

ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/v$NODE_VERSION/bin:$PATH

ENV API_URL   $API_URL
ENV API_SWAGGER_URL $API_SWAGGER_URL
ENV AUTH_COOKIE_NAME $AUTH_COOKIE_NAME

# Add the keys and set permissions
RUN mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh && \
    echo "IdentityFile /root/.ssh/bitbucket-readonly" >> /root/.ssh/config

ADD bitbucket-readonly /root/.ssh/
ADD atlas-jsonschema-readonly /root/.ssh/

RUN chmod 600 /root/.ssh/bitbucket-readonly && \
    ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# install yarn
RUN apt-get install apt-transport-https
RUN npm install -g yarn

# server installation directory
RUN mkdir /app

# push this app to the deployment directory
WORKDIR /app
ADD . /app

# move cached installs into the app
RUN cat /root/.ssh/atlas-jsonschema-readonly > /etc/ssh/id_rsa && \
    chmod 600 /etc/ssh/id_rsa && \
    eval $(ssh-agent -s) && \
    ssh-add /etc/ssh/id_rsa && \
    cd /app && \
    yarn

# Remove SSH keys
RUN rm /app/bitbucket-readonly
RUN rm -rf /root/.ssh
RUN rm /etc/ssh/id_rsa

# run app on 3000
EXPOSE 3000

# rebuild sass with current npm
RUN npm rebuild node-sass 

# build a server for production
RUN yarn web-build

# run up the server
CMD NODE_ENV=$NODE_ENV yarn web-build-server
